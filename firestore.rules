rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
    
    function isSignedIn() {return request.auth != null;}
    
    function isUserOwner(user){
    	return request.auth.uid == user 
    }
    
    function roleNoChange(){
    	return  ("resource" in request) 
    	&& request.resource.data.role == resource.data.role 
    }
    
    function getRole(){
    	return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role
    }
    
    function roleIs(role) {
      return isSignedIn() 
      && getRole() == role
    }
    
    function userUpdateUser(user){
    	return isUserOwner(user) 
      	&& roleNoChange()
    }
    
    function userCreateUser(user){
    	return isUserOwner(user)
        && ("resource" in request)
      	&& ("role" in request.resource.data)
    		&& request.resource.data.role == 'user'
    }
    
    	match /profiles/{profile}{
			allow read: if  isSignedIn();
      allow write: if  roleIs('admin');
      }
      
      match /users/{user}{
				allow create: if userCreateUser(user) || roleIs('admin');      
    		allow read: if isUserOwner(user) || roleIs('admin');
        allow update: if userUpdateUser(user) || roleIs('admin');
        allow delete: if roleIs('admin');
        
        match /role/{role}{
        	allow read: if isUserOwner(user) || roleIs('admin');
        	allow write: if roleIs('admin');
        }
        
      }
      
    }
  }
}